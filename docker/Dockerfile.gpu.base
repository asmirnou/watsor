FROM watsor.base AS base

#
# CUDA 11.8.0 base
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.8.0/ubuntu2004/base/Dockerfile
#
RUN wget -q -O - https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64 /" > /etc/apt/sources.list.d/cuda.list

ENV CUDA_VERSION 11.8.0
LABEL com.nvidia.cuda.version="${CUDA_VERSION}"

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-11-8=11.8.89-1 \
    cuda-compat-11-8 \
    && rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,video,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.8 brand=tesla,driver>=450,driver<451 brand=tesla,driver>=470,driver<471 brand=unknown,driver>=470,driver<471 brand=nvidia,driver>=470,driver<471 brand=nvidiartx,driver>=470,driver<471 brand=geforce,driver>=470,driver<471 brand=geforcertx,driver>=470,driver<471 brand=quadro,driver>=470,driver<471 brand=quadrortx,driver>=470,driver<471 brand=titan,driver>=470,driver<471 brand=titanrtx,driver>=470,driver<471"

#
# CUDA 11.8 runtime
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.8.0/ubuntu2004/runtime/Dockerfile
#
ENV NCCL_VERSION 2.16.2

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-libraries-11-8=11.8.0-1 \
    libnpp-11-8=11.8.0.86-1 \
    cuda-nvtx-11-8=11.8.86-1 \
    libcublas-11-8=11.11.3.6-1 \
    libcusparse-11-8=11.7.5.86-1 \
    libnccl2=$NCCL_VERSION-1+cuda11.8 \
    && apt-mark hold libcublas-11-8 libnccl2 \
    && rm -rf /var/lib/apt/lists/*

#
# cuDNN 8.9.0.131 runtime
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.8.0/ubuntu2004/runtime/cudnn8/Dockerfile
#
ENV CUDNN_VERSION 8.9.0.131

LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

RUN apt-get update && apt-get install -y --no-install-recommends \
    libcudnn8=$CUDNN_VERSION-1+cuda11.8 \
    && apt-mark hold libcudnn8 \
    && rm -rf /var/lib/apt/lists/*

#
# TensorRT 8.5.3
#
# https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-853/install-guide/index.html#installing-rpm
#
ENV TENSORRT_VERSION 8.5.3
LABEL com.nvidia.tensorrt.version="${TENSORRT_VERSION}"

RUN version=$TENSORRT_VERSION-1+cuda11.8 && \
    apt-get update && apt-get install -y --no-install-recommends \
    libnvinfer8=${version} \
    libnvonnxparsers8=${version} libnvparsers8=${version} \
    libnvinfer-plugin8=${version} \
    python3-libnvinfer=${version} \
    && apt-mark hold \
    libnvinfer8 \
    libnvonnxparsers8 libnvparsers8 \
    libnvinfer-plugin8 \
    python3-libnvinfer \
    && rm -rf /var/lib/apt/lists/*

#
# Use the previous stage as a new temporary stage for building libraries
#
FROM base AS builder

LABEL watsor.builder="watsor.gpu.base.builder"

# Install basic packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

#
# CUDA 11.8 devel
#
# https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/11.8.0/ubuntu2004/devel/Dockerfile
#
RUN apt-get update && apt-get install -y --no-install-recommends \
    libtinfo5 libncursesw5 \
    cuda-cudart-dev-11-8=11.8.89-1 \
    cuda-command-line-tools-11-8=11.8.0-1 \
    cuda-minimal-build-11-8=11.8.0-1 \
    cuda-libraries-dev-11-8=11.8.0-1 \
    cuda-nvml-dev-11-8=11.8.86-1 \
    cuda-nvprof-11-8=11.8.87-1 \
    libnpp-dev-11-8=11.8.0.86-1 \
    libcusparse-dev-11-8=11.7.5.86-1 \
    libcublas-dev-11-8=11.11.3.6-1 \
    libnccl-dev=2.16.2-1+cuda11.8 \
    && apt-mark hold libcublas-dev-11-8 libnccl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install PyCUDA
RUN python3 -m pip install pycuda \
    && python3 -m pip wheel --wheel-dir /tmp/install pycuda

#
# Copy libraries to the final image
#
FROM base AS result

COPY --from=builder /tmp/install /tmp/install

RUN python3 -m pip install /tmp/install/* \
    && rm -r /tmp/install

# Download object detection UFF model
RUN mkdir model && \
    wget -q https://github.com/asmirnou/todus/raw/models/ssd_mobilenet_v2_coco_2018_03_29.uff -O model/gpu.uff && \
    mv model/gpu.uff /usr/share/watsor/model && \
    chown watsor:watsor /usr/share/watsor/model/gpu.uff && \
    rm -r model

ENV CUDA_MODULE_LOADING=LAZY
